// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blockchain/gameheadtohead/game.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Game struct {
	Index           string          `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	GameCreator     string          `protobuf:"bytes,2,opt,name=gameCreator,proto3" json:"gameCreator,omitempty"`
	TeamHome        string          `protobuf:"bytes,3,opt,name=teamHome,proto3" json:"teamHome,omitempty"`
	TeamAway        string          `protobuf:"bytes,4,opt,name=teamAway,proto3" json:"teamAway,omitempty"`
	Referee         string          `protobuf:"bytes,5,opt,name=referee,proto3" json:"referee,omitempty"`
	ScoreHomeTeam   int32           `protobuf:"varint,6,opt,name=scoreHomeTeam,proto3" json:"scoreHomeTeam,omitempty"`
	ScoreAwayTeam   int32           `protobuf:"varint,7,opt,name=scoreAwayTeam,proto3" json:"scoreAwayTeam,omitempty"`
	StartTimestamp  int64           `protobuf:"varint,8,opt,name=startTimestamp,proto3" json:"startTimestamp,omitempty"`
	FinishTimestamp int64           `protobuf:"varint,9,opt,name=finishTimestamp,proto3" json:"finishTimestamp,omitempty"`
	ScoreConsensus  *ScoreConsensus `protobuf:"bytes,10,opt,name=scoreConsensus,proto3" json:"scoreConsensus,omitempty"`
}

func (m *Game) Reset()         { *m = Game{} }
func (m *Game) String() string { return proto.CompactTextString(m) }
func (*Game) ProtoMessage()    {}
func (*Game) Descriptor() ([]byte, []int) {
	return fileDescriptor_2737afb3f3da1be9, []int{0}
}
func (m *Game) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Game) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Game.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Game) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Game.Merge(m, src)
}
func (m *Game) XXX_Size() int {
	return m.Size()
}
func (m *Game) XXX_DiscardUnknown() {
	xxx_messageInfo_Game.DiscardUnknown(m)
}

var xxx_messageInfo_Game proto.InternalMessageInfo

func (m *Game) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Game) GetGameCreator() string {
	if m != nil {
		return m.GameCreator
	}
	return ""
}

func (m *Game) GetTeamHome() string {
	if m != nil {
		return m.TeamHome
	}
	return ""
}

func (m *Game) GetTeamAway() string {
	if m != nil {
		return m.TeamAway
	}
	return ""
}

func (m *Game) GetReferee() string {
	if m != nil {
		return m.Referee
	}
	return ""
}

func (m *Game) GetScoreHomeTeam() int32 {
	if m != nil {
		return m.ScoreHomeTeam
	}
	return 0
}

func (m *Game) GetScoreAwayTeam() int32 {
	if m != nil {
		return m.ScoreAwayTeam
	}
	return 0
}

func (m *Game) GetStartTimestamp() int64 {
	if m != nil {
		return m.StartTimestamp
	}
	return 0
}

func (m *Game) GetFinishTimestamp() int64 {
	if m != nil {
		return m.FinishTimestamp
	}
	return 0
}

func (m *Game) GetScoreConsensus() *ScoreConsensus {
	if m != nil {
		return m.ScoreConsensus
	}
	return nil
}

type ScoreConsensus struct {
	HomeTeamSubmittedScoreHomeTeam int32 `protobuf:"varint,1,opt,name=homeTeamSubmittedScoreHomeTeam,proto3" json:"homeTeamSubmittedScoreHomeTeam,omitempty"`
	HomeTeamSubmittedScoreAwayTeam int32 `protobuf:"varint,2,opt,name=homeTeamSubmittedScoreAwayTeam,proto3" json:"homeTeamSubmittedScoreAwayTeam,omitempty"`
	AwayTeamSubmittedScoreHomeTeam int32 `protobuf:"varint,3,opt,name=awayTeamSubmittedScoreHomeTeam,proto3" json:"awayTeamSubmittedScoreHomeTeam,omitempty"`
	AwayTeamSubmittedScoreAwayTeam int32 `protobuf:"varint,4,opt,name=awayTeamSubmittedScoreAwayTeam,proto3" json:"awayTeamSubmittedScoreAwayTeam,omitempty"`
	RefereeSubmittedScoreHomeTeam  int32 `protobuf:"varint,5,opt,name=refereeSubmittedScoreHomeTeam,proto3" json:"refereeSubmittedScoreHomeTeam,omitempty"`
	RefereeSubmittedScoreAwayTeam  int32 `protobuf:"varint,6,opt,name=refereeSubmittedScoreAwayTeam,proto3" json:"refereeSubmittedScoreAwayTeam,omitempty"`
}

func (m *ScoreConsensus) Reset()         { *m = ScoreConsensus{} }
func (m *ScoreConsensus) String() string { return proto.CompactTextString(m) }
func (*ScoreConsensus) ProtoMessage()    {}
func (*ScoreConsensus) Descriptor() ([]byte, []int) {
	return fileDescriptor_2737afb3f3da1be9, []int{1}
}
func (m *ScoreConsensus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScoreConsensus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScoreConsensus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScoreConsensus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScoreConsensus.Merge(m, src)
}
func (m *ScoreConsensus) XXX_Size() int {
	return m.Size()
}
func (m *ScoreConsensus) XXX_DiscardUnknown() {
	xxx_messageInfo_ScoreConsensus.DiscardUnknown(m)
}

var xxx_messageInfo_ScoreConsensus proto.InternalMessageInfo

func (m *ScoreConsensus) GetHomeTeamSubmittedScoreHomeTeam() int32 {
	if m != nil {
		return m.HomeTeamSubmittedScoreHomeTeam
	}
	return 0
}

func (m *ScoreConsensus) GetHomeTeamSubmittedScoreAwayTeam() int32 {
	if m != nil {
		return m.HomeTeamSubmittedScoreAwayTeam
	}
	return 0
}

func (m *ScoreConsensus) GetAwayTeamSubmittedScoreHomeTeam() int32 {
	if m != nil {
		return m.AwayTeamSubmittedScoreHomeTeam
	}
	return 0
}

func (m *ScoreConsensus) GetAwayTeamSubmittedScoreAwayTeam() int32 {
	if m != nil {
		return m.AwayTeamSubmittedScoreAwayTeam
	}
	return 0
}

func (m *ScoreConsensus) GetRefereeSubmittedScoreHomeTeam() int32 {
	if m != nil {
		return m.RefereeSubmittedScoreHomeTeam
	}
	return 0
}

func (m *ScoreConsensus) GetRefereeSubmittedScoreAwayTeam() int32 {
	if m != nil {
		return m.RefereeSubmittedScoreAwayTeam
	}
	return 0
}

func init() {
	proto.RegisterType((*Game)(nil), "internetofsports.blockchain.gameheadtohead.Game")
	proto.RegisterType((*ScoreConsensus)(nil), "internetofsports.blockchain.gameheadtohead.ScoreConsensus")
}

func init() {
	proto.RegisterFile("blockchain/gameheadtohead/game.proto", fileDescriptor_2737afb3f3da1be9)
}

var fileDescriptor_2737afb3f3da1be9 = []byte{
	// 428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x3b, 0x9b, 0xb6, 0xbb, 0x3b, 0x8b, 0x15, 0x06, 0x0f, 0x83, 0xe0, 0x10, 0x96, 0x45,
	0x82, 0x87, 0x14, 0xf4, 0x26, 0x78, 0xd0, 0x95, 0x55, 0x4f, 0x42, 0xb2, 0x20, 0x78, 0x9b, 0xa4,
	0x2f, 0x9b, 0x41, 0x27, 0x13, 0x66, 0xa6, 0xb8, 0xfb, 0x2d, 0xc4, 0xcf, 0xe3, 0x07, 0xf0, 0xb8,
	0x47, 0x8f, 0xd2, 0x7e, 0x11, 0xc9, 0x34, 0x49, 0x9b, 0x40, 0xa2, 0x97, 0xd2, 0xf7, 0xde, 0xff,
	0xfd, 0xf2, 0x9f, 0xc7, 0x7b, 0xf8, 0x22, 0xf9, 0xaa, 0xd2, 0x2f, 0x69, 0xce, 0x45, 0xb1, 0xbc,
	0xe1, 0x12, 0x72, 0xe0, 0x2b, 0xab, 0xaa, 0x5f, 0x17, 0x86, 0xa5, 0x56, 0x56, 0x91, 0x67, 0xa2,
	0xb0, 0xa0, 0x0b, 0xb0, 0x2a, 0x33, 0xa5, 0xd2, 0xd6, 0x84, 0xfb, 0xb6, 0xb0, 0xdb, 0x76, 0xfe,
	0xc3, 0xc3, 0xd3, 0x77, 0x5c, 0x02, 0x79, 0x84, 0x67, 0xa2, 0x58, 0xc1, 0x2d, 0x45, 0x3e, 0x0a,
	0x4e, 0xa3, 0x5d, 0x40, 0x7c, 0x7c, 0x56, 0x35, 0x5c, 0x6a, 0xe0, 0x56, 0x69, 0x7a, 0xe4, 0x6a,
	0x87, 0x29, 0xf2, 0x18, 0x9f, 0x58, 0xe0, 0xf2, 0xbd, 0x92, 0x40, 0x3d, 0x57, 0x6e, 0xe3, 0xa6,
	0xf6, 0xfa, 0x1b, 0xbf, 0xa3, 0xd3, 0x7d, 0xad, 0x8a, 0x09, 0xc5, 0xc7, 0x1a, 0x32, 0xd0, 0x00,
	0x74, 0xe6, 0x4a, 0x4d, 0x48, 0x2e, 0xf0, 0x03, 0x93, 0x2a, 0x0d, 0x15, 0xe2, 0x1a, 0xb8, 0xa4,
	0x73, 0x1f, 0x05, 0xb3, 0xa8, 0x9b, 0x6c, 0x55, 0x15, 0xcc, 0xa9, 0x8e, 0x0f, 0x54, 0x4d, 0x92,
	0x3c, 0xc5, 0x0b, 0x63, 0xb9, 0xb6, 0xd7, 0x42, 0x82, 0xb1, 0x5c, 0x96, 0xf4, 0xc4, 0x47, 0x81,
	0x17, 0xf5, 0xb2, 0x24, 0xc0, 0x0f, 0x33, 0x51, 0x08, 0x93, 0xef, 0x85, 0xa7, 0x4e, 0xd8, 0x4f,
	0x93, 0x04, 0x2f, 0xdc, 0x27, 0x2e, 0x55, 0x61, 0xa0, 0x30, 0x6b, 0x43, 0xb1, 0x8f, 0x82, 0xb3,
	0xe7, 0x2f, 0xc3, 0xff, 0x9f, 0x7a, 0x18, 0x77, 0x08, 0x51, 0x8f, 0x78, 0xfe, 0xd3, 0xc3, 0x8b,
	0xae, 0x84, 0x5c, 0x61, 0x96, 0xd7, 0x4f, 0x8f, 0xd7, 0x89, 0x14, 0xd6, 0xc2, 0x2a, 0xee, 0x4c,
	0x09, 0xb9, 0xf7, 0xff, 0x43, 0x35, 0xcc, 0x69, 0xe7, 0x78, 0x34, 0xc6, 0x69, 0x07, 0x7b, 0x85,
	0x19, 0xaf, 0xff, 0x0f, 0xf8, 0xf1, 0x76, 0x9c, 0x71, 0xd5, 0x30, 0xa7, 0xf5, 0x33, 0x1d, 0xe3,
	0xb4, 0x7e, 0xde, 0xe2, 0x27, 0xf5, 0xfe, 0x0c, 0xd8, 0x99, 0x39, 0xcc, 0xb8, 0x68, 0x90, 0xd2,
	0x9a, 0x99, 0x8f, 0x50, 0x1a, 0xd1, 0x9b, 0x4f, 0xbf, 0x36, 0x0c, 0xdd, 0x6f, 0x18, 0xfa, 0xb3,
	0x61, 0xe8, 0xfb, 0x96, 0x4d, 0xee, 0xb7, 0x6c, 0xf2, 0x7b, 0xcb, 0x26, 0x9f, 0x5f, 0xdd, 0x08,
	0x9b, 0xaf, 0x93, 0x30, 0x55, 0x72, 0xf9, 0xa1, 0x5e, 0x97, 0x8f, 0x59, 0xec, 0xd6, 0x65, 0x79,
	0x70, 0xdb, 0xb7, 0xfd, 0xeb, 0xb6, 0x77, 0x25, 0x98, 0x64, 0xee, 0xee, 0xfb, 0xc5, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x6e, 0xa4, 0xf3, 0x9f, 0x07, 0x04, 0x00, 0x00,
}

func (m *Game) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Game) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Game) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScoreConsensus != nil {
		{
			size, err := m.ScoreConsensus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGame(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.FinishTimestamp != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.FinishTimestamp))
		i--
		dAtA[i] = 0x48
	}
	if m.StartTimestamp != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.StartTimestamp))
		i--
		dAtA[i] = 0x40
	}
	if m.ScoreAwayTeam != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.ScoreAwayTeam))
		i--
		dAtA[i] = 0x38
	}
	if m.ScoreHomeTeam != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.ScoreHomeTeam))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Referee) > 0 {
		i -= len(m.Referee)
		copy(dAtA[i:], m.Referee)
		i = encodeVarintGame(dAtA, i, uint64(len(m.Referee)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TeamAway) > 0 {
		i -= len(m.TeamAway)
		copy(dAtA[i:], m.TeamAway)
		i = encodeVarintGame(dAtA, i, uint64(len(m.TeamAway)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TeamHome) > 0 {
		i -= len(m.TeamHome)
		copy(dAtA[i:], m.TeamHome)
		i = encodeVarintGame(dAtA, i, uint64(len(m.TeamHome)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GameCreator) > 0 {
		i -= len(m.GameCreator)
		copy(dAtA[i:], m.GameCreator)
		i = encodeVarintGame(dAtA, i, uint64(len(m.GameCreator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintGame(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScoreConsensus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScoreConsensus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScoreConsensus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RefereeSubmittedScoreAwayTeam != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.RefereeSubmittedScoreAwayTeam))
		i--
		dAtA[i] = 0x30
	}
	if m.RefereeSubmittedScoreHomeTeam != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.RefereeSubmittedScoreHomeTeam))
		i--
		dAtA[i] = 0x28
	}
	if m.AwayTeamSubmittedScoreAwayTeam != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.AwayTeamSubmittedScoreAwayTeam))
		i--
		dAtA[i] = 0x20
	}
	if m.AwayTeamSubmittedScoreHomeTeam != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.AwayTeamSubmittedScoreHomeTeam))
		i--
		dAtA[i] = 0x18
	}
	if m.HomeTeamSubmittedScoreAwayTeam != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.HomeTeamSubmittedScoreAwayTeam))
		i--
		dAtA[i] = 0x10
	}
	if m.HomeTeamSubmittedScoreHomeTeam != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.HomeTeamSubmittedScoreHomeTeam))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGame(dAtA []byte, offset int, v uint64) int {
	offset -= sovGame(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Game) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	l = len(m.GameCreator)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	l = len(m.TeamHome)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	l = len(m.TeamAway)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	l = len(m.Referee)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.ScoreHomeTeam != 0 {
		n += 1 + sovGame(uint64(m.ScoreHomeTeam))
	}
	if m.ScoreAwayTeam != 0 {
		n += 1 + sovGame(uint64(m.ScoreAwayTeam))
	}
	if m.StartTimestamp != 0 {
		n += 1 + sovGame(uint64(m.StartTimestamp))
	}
	if m.FinishTimestamp != 0 {
		n += 1 + sovGame(uint64(m.FinishTimestamp))
	}
	if m.ScoreConsensus != nil {
		l = m.ScoreConsensus.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func (m *ScoreConsensus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HomeTeamSubmittedScoreHomeTeam != 0 {
		n += 1 + sovGame(uint64(m.HomeTeamSubmittedScoreHomeTeam))
	}
	if m.HomeTeamSubmittedScoreAwayTeam != 0 {
		n += 1 + sovGame(uint64(m.HomeTeamSubmittedScoreAwayTeam))
	}
	if m.AwayTeamSubmittedScoreHomeTeam != 0 {
		n += 1 + sovGame(uint64(m.AwayTeamSubmittedScoreHomeTeam))
	}
	if m.AwayTeamSubmittedScoreAwayTeam != 0 {
		n += 1 + sovGame(uint64(m.AwayTeamSubmittedScoreAwayTeam))
	}
	if m.RefereeSubmittedScoreHomeTeam != 0 {
		n += 1 + sovGame(uint64(m.RefereeSubmittedScoreHomeTeam))
	}
	if m.RefereeSubmittedScoreAwayTeam != 0 {
		n += 1 + sovGame(uint64(m.RefereeSubmittedScoreAwayTeam))
	}
	return n
}

func sovGame(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGame(x uint64) (n int) {
	return sovGame(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Game) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Game: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Game: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamHome", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamHome = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamAway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamAway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Referee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Referee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreHomeTeam", wireType)
			}
			m.ScoreHomeTeam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScoreHomeTeam |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreAwayTeam", wireType)
			}
			m.ScoreAwayTeam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScoreAwayTeam |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimestamp", wireType)
			}
			m.StartTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTimestamp", wireType)
			}
			m.FinishTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreConsensus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScoreConsensus == nil {
				m.ScoreConsensus = &ScoreConsensus{}
			}
			if err := m.ScoreConsensus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScoreConsensus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScoreConsensus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScoreConsensus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeTeamSubmittedScoreHomeTeam", wireType)
			}
			m.HomeTeamSubmittedScoreHomeTeam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeTeamSubmittedScoreHomeTeam |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeTeamSubmittedScoreAwayTeam", wireType)
			}
			m.HomeTeamSubmittedScoreAwayTeam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeTeamSubmittedScoreAwayTeam |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayTeamSubmittedScoreHomeTeam", wireType)
			}
			m.AwayTeamSubmittedScoreHomeTeam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwayTeamSubmittedScoreHomeTeam |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayTeamSubmittedScoreAwayTeam", wireType)
			}
			m.AwayTeamSubmittedScoreAwayTeam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwayTeamSubmittedScoreAwayTeam |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefereeSubmittedScoreHomeTeam", wireType)
			}
			m.RefereeSubmittedScoreHomeTeam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefereeSubmittedScoreHomeTeam |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefereeSubmittedScoreAwayTeam", wireType)
			}
			m.RefereeSubmittedScoreAwayTeam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefereeSubmittedScoreAwayTeam |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGame(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGame
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGame
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGame
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGame
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGame        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGame          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGame = fmt.Errorf("proto: unexpected end of group")
)
