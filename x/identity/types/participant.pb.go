// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blockchain/identity/participant.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Participant struct {
	Index              string            `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Nickname           string            `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Address            string            `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	TeamJoiningInvites map[string]string `protobuf:"bytes,4,rep,name=teamJoiningInvites,proto3" json:"teamJoiningInvites,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Participant) Reset()         { *m = Participant{} }
func (m *Participant) String() string { return proto.CompactTextString(m) }
func (*Participant) ProtoMessage()    {}
func (*Participant) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e7c2e9195f7d5d2, []int{0}
}
func (m *Participant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Participant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Participant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Participant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Participant.Merge(m, src)
}
func (m *Participant) XXX_Size() int {
	return m.Size()
}
func (m *Participant) XXX_DiscardUnknown() {
	xxx_messageInfo_Participant.DiscardUnknown(m)
}

var xxx_messageInfo_Participant proto.InternalMessageInfo

func (m *Participant) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Participant) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *Participant) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Participant) GetTeamJoiningInvites() map[string]string {
	if m != nil {
		return m.TeamJoiningInvites
	}
	return nil
}

func init() {
	proto.RegisterType((*Participant)(nil), "internetofsports.blockchain.identity.Participant")
	proto.RegisterMapType((map[string]string)(nil), "internetofsports.blockchain.identity.Participant.TeamJoiningInvitesEntry")
}

func init() {
	proto.RegisterFile("blockchain/identity/participant.proto", fileDescriptor_3e7c2e9195f7d5d2)
}

var fileDescriptor_3e7c2e9195f7d5d2 = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xbf, 0x4f, 0x02, 0x31,
	0x14, 0xc7, 0x29, 0xf8, 0xb3, 0x2c, 0xa6, 0x31, 0xf1, 0xc2, 0xd0, 0x10, 0xa3, 0x09, 0x53, 0x2f,
	0xd1, 0x41, 0xe3, 0x68, 0xc2, 0x80, 0x8b, 0x8a, 0x4e, 0x6e, 0xe5, 0xae, 0xc0, 0x0b, 0xf0, 0x7a,
	0x69, 0x1f, 0x84, 0xfb, 0x2f, 0xdc, 0xfd, 0x87, 0x1c, 0x19, 0x1d, 0x0d, 0xf7, 0x8f, 0x18, 0x0e,
	0xce, 0x23, 0x51, 0x13, 0xb7, 0x7e, 0xf2, 0xfa, 0x6d, 0xdf, 0x27, 0x5f, 0x7e, 0xde, 0x1b, 0xdb,
	0x68, 0x14, 0x0d, 0x35, 0x60, 0x08, 0xb1, 0x41, 0x02, 0x4a, 0xc3, 0x44, 0x3b, 0x82, 0x08, 0x12,
	0x8d, 0xa4, 0x12, 0x67, 0xc9, 0x8a, 0x33, 0x40, 0x32, 0x0e, 0x0d, 0xd9, 0xbe, 0x4f, 0xac, 0x23,
	0xaf, 0xca, 0x9c, 0x2a, 0x72, 0xa7, 0x6f, 0x55, 0x5e, 0x7f, 0x28, 0xb3, 0xe2, 0x98, 0xef, 0x02,
	0xc6, 0x66, 0x1e, 0xb0, 0x26, 0x6b, 0x1d, 0x76, 0xd7, 0x20, 0x1a, 0xfc, 0x00, 0x21, 0x1a, 0xa1,
	0x9e, 0x98, 0xa0, 0x9a, 0x0f, 0xbe, 0x59, 0x04, 0x7c, 0x5f, 0xc7, 0xb1, 0x33, 0xde, 0x07, 0xb5,
	0x7c, 0x54, 0xa0, 0x48, 0xb9, 0x20, 0xa3, 0x27, 0x77, 0x16, 0x10, 0x70, 0xd0, 0xc1, 0x19, 0x90,
	0xf1, 0xc1, 0x4e, 0xb3, 0xd6, 0xaa, 0x5f, 0x74, 0xd4, 0x7f, 0xd6, 0x53, 0x5b, 0xab, 0xa9, 0xe7,
	0x1f, 0x6f, 0xb5, 0x91, 0x5c, 0xda, 0xfd, 0xe5, 0x93, 0x46, 0x9b, 0x9f, 0xfc, 0x71, 0x5d, 0x1c,
	0xf1, 0xda, 0xc8, 0xa4, 0x1b, 0xbf, 0xd5, 0x71, 0xe5, 0x3c, 0xd3, 0xe3, 0x69, 0xa1, 0xb6, 0x86,
	0x9b, 0xea, 0x35, 0xbb, 0x7d, 0x7c, 0x5f, 0x4a, 0xb6, 0x58, 0x4a, 0xf6, 0xb9, 0x94, 0xec, 0x35,
	0x93, 0x95, 0x45, 0x26, 0x2b, 0x1f, 0x99, 0xac, 0xbc, 0x5c, 0x0d, 0x80, 0x86, 0xd3, 0x9e, 0x8a,
	0xec, 0x24, 0xec, 0x6c, 0x4c, 0xee, 0xfb, 0x4f, 0xb9, 0x49, 0xb8, 0x55, 0xd0, 0xbc, 0xac, 0x88,
	0xd2, 0xc4, 0xf8, 0xde, 0x5e, 0xde, 0xce, 0xe5, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x17, 0xa8,
	0xe1, 0x22, 0xc6, 0x01, 0x00, 0x00,
}

func (m *Participant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Participant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Participant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TeamJoiningInvites) > 0 {
		for k := range m.TeamJoiningInvites {
			v := m.TeamJoiningInvites[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintParticipant(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintParticipant(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintParticipant(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintParticipant(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintParticipant(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintParticipant(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParticipant(dAtA []byte, offset int, v uint64) int {
	offset -= sovParticipant(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Participant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovParticipant(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovParticipant(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovParticipant(uint64(l))
	}
	if len(m.TeamJoiningInvites) > 0 {
		for k, v := range m.TeamJoiningInvites {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovParticipant(uint64(len(k))) + 1 + len(v) + sovParticipant(uint64(len(v)))
			n += mapEntrySize + 1 + sovParticipant(uint64(mapEntrySize))
		}
	}
	return n
}

func sovParticipant(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParticipant(x uint64) (n int) {
	return sovParticipant(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Participant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParticipant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Participant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Participant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamJoiningInvites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParticipant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamJoiningInvites == nil {
				m.TeamJoiningInvites = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowParticipant
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParticipant
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthParticipant
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthParticipant
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParticipant
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthParticipant
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthParticipant
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipParticipant(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthParticipant
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TeamJoiningInvites[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParticipant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParticipant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParticipant(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParticipant
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParticipant
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParticipant
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParticipant
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParticipant        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParticipant          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParticipant = fmt.Errorf("proto: unexpected end of group")
)
